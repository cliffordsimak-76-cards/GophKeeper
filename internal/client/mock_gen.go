// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	api "github.com/cliffordsimak-76-cards/gophkeeper/pkg/gophkeeper-api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockServices) CreateAccount(ctx context.Context, in *api.CreateAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccount", varargs...)
	ret0, _ := ret[0].(*api.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockServicesMockRecorder) CreateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockServices)(nil).CreateAccount), varargs...)
}

// CreateCard mocks base method.
func (m *MockServices) CreateCard(ctx context.Context, in *api.CreateCardRequest, opts ...grpc.CallOption) (*api.Card, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCard", varargs...)
	ret0, _ := ret[0].(*api.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockServicesMockRecorder) CreateCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockServices)(nil).CreateCard), varargs...)
}

// CreateNote mocks base method.
func (m *MockServices) CreateNote(ctx context.Context, in *api.CreateNoteRequest, opts ...grpc.CallOption) (*api.Note, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNote", varargs...)
	ret0, _ := ret[0].(*api.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockServicesMockRecorder) CreateNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockServices)(nil).CreateNote), varargs...)
}

// GetAccount mocks base method.
func (m *MockServices) GetAccount(ctx context.Context, in *api.GetAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*api.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockServicesMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockServices)(nil).GetAccount), varargs...)
}

// GetCard mocks base method.
func (m *MockServices) GetCard(ctx context.Context, in *api.GetCardRequest, opts ...grpc.CallOption) (*api.Card, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCard", varargs...)
	ret0, _ := ret[0].(*api.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockServicesMockRecorder) GetCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockServices)(nil).GetCard), varargs...)
}

// GetNote mocks base method.
func (m *MockServices) GetNote(ctx context.Context, in *api.GetNoteRequest, opts ...grpc.CallOption) (*api.Note, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNote", varargs...)
	ret0, _ := ret[0].(*api.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockServicesMockRecorder) GetNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockServices)(nil).GetNote), varargs...)
}

// ListAvailableAccounts mocks base method.
func (m *MockServices) ListAvailableAccounts(ctx context.Context, in *api.ListAvailableAccountsRequest, opts ...grpc.CallOption) (*api.ListAvailableAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableAccounts", varargs...)
	ret0, _ := ret[0].(*api.ListAvailableAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableAccounts indicates an expected call of ListAvailableAccounts.
func (mr *MockServicesMockRecorder) ListAvailableAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableAccounts", reflect.TypeOf((*MockServices)(nil).ListAvailableAccounts), varargs...)
}

// ListAvailableCards mocks base method.
func (m *MockServices) ListAvailableCards(ctx context.Context, in *api.ListAvailableCardsRequest, opts ...grpc.CallOption) (*api.ListAvailableCardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableCards", varargs...)
	ret0, _ := ret[0].(*api.ListAvailableCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableCards indicates an expected call of ListAvailableCards.
func (mr *MockServicesMockRecorder) ListAvailableCards(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableCards", reflect.TypeOf((*MockServices)(nil).ListAvailableCards), varargs...)
}

// ListAvailableNotes mocks base method.
func (m *MockServices) ListAvailableNotes(ctx context.Context, in *api.ListAvailableNotesRequest, opts ...grpc.CallOption) (*api.ListAvailableNotesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableNotes", varargs...)
	ret0, _ := ret[0].(*api.ListAvailableNotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableNotes indicates an expected call of ListAvailableNotes.
func (mr *MockServicesMockRecorder) ListAvailableNotes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableNotes", reflect.TypeOf((*MockServices)(nil).ListAvailableNotes), varargs...)
}

// Login mocks base method.
func (m *MockServices) Login(ctx context.Context, in *api.LoginRequest, opts ...grpc.CallOption) (*api.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*api.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServicesMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockServices)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockServices) Register(ctx context.Context, in *api.RegisterRequest, opts ...grpc.CallOption) (*api.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*api.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockServicesMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServices)(nil).Register), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockServices) UpdateAccount(ctx context.Context, in *api.UpdateAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*api.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockServicesMockRecorder) UpdateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockServices)(nil).UpdateAccount), varargs...)
}

// UpdateCard mocks base method.
func (m *MockServices) UpdateCard(ctx context.Context, in *api.UpdateCardRequest, opts ...grpc.CallOption) (*api.Card, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCard", varargs...)
	ret0, _ := ret[0].(*api.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockServicesMockRecorder) UpdateCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockServices)(nil).UpdateCard), varargs...)
}

// UpdateNote mocks base method.
func (m *MockServices) UpdateNote(ctx context.Context, in *api.UpdateNoteRequest, opts ...grpc.CallOption) (*api.Note, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNote", varargs...)
	ret0, _ := ret[0].(*api.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockServicesMockRecorder) UpdateNote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockServices)(nil).UpdateNote), varargs...)
}
