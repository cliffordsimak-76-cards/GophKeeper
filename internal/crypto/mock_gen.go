// Code generated by MockGen. DO NOT EDIT.
// Source: crypto.go

// Package crypto is a generated GoMock package.
package crypto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCrypto is a mock of Crypto interface.
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto.
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance.
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// HashAndSalt mocks base method.
func (m *MockCrypto) HashAndSalt(pwd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashAndSalt", pwd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashAndSalt indicates an expected call of HashAndSalt.
func (mr *MockCryptoMockRecorder) HashAndSalt(pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashAndSalt", reflect.TypeOf((*MockCrypto)(nil).HashAndSalt), pwd)
}

// IsCorrectPassword mocks base method.
func (m *MockCrypto) IsCorrectPassword(hashedPwd, plainPwd string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCorrectPassword", hashedPwd, plainPwd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCorrectPassword indicates an expected call of IsCorrectPassword.
func (mr *MockCryptoMockRecorder) IsCorrectPassword(hashedPwd, plainPwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCorrectPassword", reflect.TypeOf((*MockCrypto)(nil).IsCorrectPassword), hashedPwd, plainPwd)
}
